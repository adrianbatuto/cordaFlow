/**
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface CPIIDV5
 */
export interface CPIIDV5 {
    /**
     *
     * @type {string}
     * @memberof CPIIDV5
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CPIIDV5
     */
    'signerSummaryHash'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CPIIDV5
     */
    'version': string;
}
/**
 *
 * @export
 * @interface CPIV5Response
 */
export interface CPIV5Response {
    /**
     *
     * @type {Array<CPIV5ResponseCpisInner>}
     * @memberof CPIV5Response
     */
    'cpis'?: Array<CPIV5ResponseCpisInner>;
}
/**
 *
 * @export
 * @interface CPIV5ResponseCpisInner
 */
export interface CPIV5ResponseCpisInner {
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInner
     */
    'cpiFileChecksum'?: string;
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInner
     */
    'cpiFileFullChecksum'?: string;
    /**
     *
     * @type {Array<CPIV5ResponseCpisInnerCpksInner>}
     * @memberof CPIV5ResponseCpisInner
     */
    'cpks'?: Array<CPIV5ResponseCpisInnerCpksInner>;
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInner
     */
    'groupPolicy'?: string | null;
    /**
     *
     * @type {CPIIDV5}
     * @memberof CPIV5ResponseCpisInner
     */
    'id'?: CPIIDV5;
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInner
     */
    'timestamp'?: string;
}
/**
 *
 * @export
 * @interface CPIV5ResponseCpisInnerCpksInner
 */
export interface CPIV5ResponseCpisInnerCpksInner {
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInnerCpksInner
     */
    'hash'?: string;
    /**
     *
     * @type {CPIIDV5}
     * @memberof CPIV5ResponseCpisInnerCpksInner
     */
    'id'?: CPIIDV5;
    /**
     *
     * @type {Array<string>}
     * @memberof CPIV5ResponseCpisInnerCpksInner
     */
    'libraries'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInnerCpksInner
     */
    'mainBundle'?: string;
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInnerCpksInner
     */
    'timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof CPIV5ResponseCpisInnerCpksInner
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ClearMonitorTransactionsV1Request
 */
export interface ClearMonitorTransactionsV1Request {
    /**
     * ID of a client application that wants to monitor the state changes
     * @type {string}
     * @memberof ClearMonitorTransactionsV1Request
     */
    'clientAppId': string;
    /**
     * The fully qualified name of the Corda state to monitor
     * @type {string}
     * @memberof ClearMonitorTransactionsV1Request
     */
    'stateFullClassName': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ClearMonitorTransactionsV1Request
     */
    'txIndexes': Array<string>;
}
/**
 *
 * @export
 * @interface ClearMonitorTransactionsV1Response
 */
export interface ClearMonitorTransactionsV1Response {
    /**
     * Flag set to true if operation completed correctly.
     * @type {boolean}
     * @memberof ClearMonitorTransactionsV1Response
     */
    'success': boolean;
    /**
     * Message describing operation status or any errors that occurred.
     * @type {string}
     * @memberof ClearMonitorTransactionsV1Response
     */
    'msg': string;
}
/**
 *
 * @export
 * @interface CordaNodeSshCredentials
 */
export interface CordaNodeSshCredentials {
    /**
     *
     * @type {string}
     * @memberof CordaNodeSshCredentials
     */
    'hostKeyEntry': string;
    /**
     *
     * @type {string}
     * @memberof CordaNodeSshCredentials
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof CordaNodeSshCredentials
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof CordaNodeSshCredentials
     */
    'hostname': string;
    /**
     *
     * @type {number}
     * @memberof CordaNodeSshCredentials
     */
    'port': number;
}
/**
 *
 * @export
 * @interface CordaRpcCredentials
 */
export interface CordaRpcCredentials {
    /**
     *
     * @type {string}
     * @memberof CordaRpcCredentials
     */
    'hostname': string;
    /**
     *
     * @type {number}
     * @memberof CordaRpcCredentials
     */
    'port': number;
    /**
     *
     * @type {string}
     * @memberof CordaRpcCredentials
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof CordaRpcCredentials
     */
    'password': string;
}
/**
 *
 * @export
 * @interface CordaX500Name
 */
export interface CordaX500Name {
    /**
     *
     * @type {string}
     * @memberof CordaX500Name
     */
    'commonName'?: string;
    /**
     *
     * @type {string}
     * @memberof CordaX500Name
     */
    'organisationUnit'?: string;
    /**
     *
     * @type {string}
     * @memberof CordaX500Name
     */
    'organisation': string;
    /**
     *
     * @type {string}
     * @memberof CordaX500Name
     */
    'locality': string;
    /**
     *
     * @type {string}
     * @memberof CordaX500Name
     */
    'state'?: string;
    /**
     *
     * @type {string}
     * @memberof CordaX500Name
     */
    'country': string;
    /**
     *
     * @type {X500Principal}
     * @memberof CordaX500Name
     */
    'x500Principal': X500Principal;
}
/**
 *
 * @export
 * @interface CordappDeploymentConfig
 */
export interface CordappDeploymentConfig {
    /**
     *
     * @type {CordaNodeSshCredentials}
     * @memberof CordappDeploymentConfig
     */
    'sshCredentials': CordaNodeSshCredentials;
    /**
     *
     * @type {CordaRpcCredentials}
     * @memberof CordappDeploymentConfig
     */
    'rpcCredentials': CordaRpcCredentials;
    /**
     * The shell command to execute in order to start back up a Corda node after having placed new jars in the cordapp directory of said node.
     * @type {string}
     * @memberof CordappDeploymentConfig
     */
    'cordaNodeStartCmd': string;
    /**
     * The absolute file system path where the Corda Node is expecting deployed Cordapp jar files to be placed.
     * @type {string}
     * @memberof CordappDeploymentConfig
     */
    'cordappDir': string;
    /**
     * The absolute file system path where the corda.jar file of the node can be found. This is used to execute database schema migrations where applicable (H2 database in use in development environments).
     * @type {string}
     * @memberof CordappDeploymentConfig
     */
    'cordaJarPath': string;
    /**
     * The absolute file system path where the base directory of the Corda node can be found. This is used to pass in to corda.jar when being invoked for certain tasks such as executing database schema migrations for a deployed contract.
     * @type {string}
     * @memberof CordappDeploymentConfig
     */
    'nodeBaseDirPath': string;
}
/**
 * A CordappInfo describes a single CorDapp currently installed on the node
 * @export
 * @interface CordappInfo
 */
export interface CordappInfo {
    /**
     *
     * @type {SHA256}
     * @memberof CordappInfo
     */
    'jarHash': SHA256;
    /**
     * The name of the licence this CorDapp is released under
     * @type {string}
     * @memberof CordappInfo
     */
    'licence': string;
    /**
     * The minimum platform version the node must be at for the CorDapp to run
     * @type {number}
     * @memberof CordappInfo
     */
    'minimumPlatformVersion': number;
    /**
     * The name of the JAR file that defines the CorDapp
     * @type {string}
     * @memberof CordappInfo
     */
    'name': string;
    /**
     * The name of the CorDapp
     * @type {string}
     * @memberof CordappInfo
     */
    'shortName': string;
    /**
     * The target platform version this CorDapp has been tested against
     * @type {number}
     * @memberof CordappInfo
     */
    'targetPlatformVersion': number;
    /**
     * A description of what sort of CorDapp this is - either a contract, workflow, or a combination.
     * @type {string}
     * @memberof CordappInfo
     */
    'type': string;
    /**
     * The vendor of this CorDapp
     * @type {string}
     * @memberof CordappInfo
     */
    'vendor': string;
    /**
     * The version of this CorDapp
     * @type {string}
     * @memberof CordappInfo
     */
    'version': string;
}
/**
 *
 * @export
 * @interface DeployContractJarsBadRequestV1Response
 */
export interface DeployContractJarsBadRequestV1Response {
    /**
     *
     * @type {Array<string>}
     * @memberof DeployContractJarsBadRequestV1Response
     */
    'errors': Array<string>;
}
/**
 *
 * @export
 * @interface DeployContractJarsSuccessV1Response
 */
export interface DeployContractJarsSuccessV1Response {
    /**
     *
     * @type {Array<string>}
     * @memberof DeployContractJarsSuccessV1Response
     */
    'deployedJarFiles': Array<string>;
}
/**
 *
 * @export
 * @interface DeployContractJarsV1Request
 */
export interface DeployContractJarsV1Request {
    /**
     * The list of deployment configurations pointing to the nodes where the provided cordapp jar files are to be deployed .
     * @type {Array<CordappDeploymentConfig>}
     * @memberof DeployContractJarsV1Request
     */
    'cordappDeploymentConfigs': Array<CordappDeploymentConfig>;
    /**
     *
     * @type {Array<JarFile>}
     * @memberof DeployContractJarsV1Request
     */
    'jarFiles': Array<JarFile>;
}
/**
 *
 * @export
 * @interface DiagnoseNodeV1Request
 */
export interface DiagnoseNodeV1Request {
    /**
     * Optional property specifying which Corda Node should be the one being diagnosed in case the Connector has multiple connections established for different nodes (which is not yet a supported feature, but we want to keep this possibility open for the future).
     * @type {Array<string>}
     * @memberof DiagnoseNodeV1Request
     */
    'nodeIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface DiagnoseNodeV1Response
 */
export interface DiagnoseNodeV1Response {
    /**
     *
     * @type {NodeDiagnosticInfo}
     * @memberof DiagnoseNodeV1Response
     */
    'nodeDiagnosticInfo': NodeDiagnosticInfo;
}
/**
 * Determines which flow starting method will be used on the back-end when invoking the flow. Based on the value here the plugin back-end might invoke the rpc.startFlowDynamic() method or the rpc.startTrackedFlowDynamic() method. Streamed responses are aggregated and returned in a single response to HTTP callers who are not equipped to handle streams like WebSocket/gRPC/etc. do.
 * @export
 * @enum {string}
 */
export declare const FlowInvocationType: {
    readonly TrackedFlowDynamic: "TRACKED_FLOW_DYNAMIC";
    readonly FlowDynamic: "FLOW_DYNAMIC";
};
export type FlowInvocationType = typeof FlowInvocationType[keyof typeof FlowInvocationType];
/**
 *
 * @export
 * @interface FlowStatusV5Response
 */
export interface FlowStatusV5Response {
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5Response
     */
    'clientRequestId'?: string | null;
    /**
     *
     * @type {FlowV5Error}
     * @memberof FlowStatusV5Response
     */
    'flowError'?: FlowV5Error;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5Response
     */
    'flowId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5Response
     */
    'flowResult'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5Response
     */
    'flowStatus': string;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5Response
     */
    'holdingIDShortHash': string;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5Response
     */
    'timestamp': string;
}
/**
 *
 * @export
 * @interface FlowStatusV5Responses
 */
export interface FlowStatusV5Responses {
    /**
     *
     * @type {Array<FlowStatusV5ResponsesFlowStatusResponsesInner>}
     * @memberof FlowStatusV5Responses
     */
    'flowStatusResponses'?: Array<FlowStatusV5ResponsesFlowStatusResponsesInner>;
}
/**
 *
 * @export
 * @interface FlowStatusV5ResponsesFlowStatusResponsesInner
 */
export interface FlowStatusV5ResponsesFlowStatusResponsesInner {
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5ResponsesFlowStatusResponsesInner
     */
    'clientRequestId'?: string | null;
    /**
     *
     * @type {FlowV5Error}
     * @memberof FlowStatusV5ResponsesFlowStatusResponsesInner
     */
    'flowError'?: FlowV5Error;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5ResponsesFlowStatusResponsesInner
     */
    'flowId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5ResponsesFlowStatusResponsesInner
     */
    'flowResult'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5ResponsesFlowStatusResponsesInner
     */
    'flowStatus'?: string;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5ResponsesFlowStatusResponsesInner
     */
    'holdingIDShortHash'?: string;
    /**
     *
     * @type {string}
     * @memberof FlowStatusV5ResponsesFlowStatusResponsesInner
     */
    'timestamp'?: string;
}
/**
 *
 * @export
 * @interface FlowV5Error
 */
export interface FlowV5Error {
    /**
     *
     * @type {string}
     * @memberof FlowV5Error
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof FlowV5Error
     */
    'type': string;
}
/**
 *
 * @export
 * @interface GetMonitorTransactionsV1Request
 */
export interface GetMonitorTransactionsV1Request {
    /**
     * ID of a client application that wants to monitor the state changes
     * @type {string}
     * @memberof GetMonitorTransactionsV1Request
     */
    'clientAppId': string;
    /**
     * The fully qualified name of the Corda state to monitor
     * @type {string}
     * @memberof GetMonitorTransactionsV1Request
     */
    'stateFullClassName': string;
}
/**
 *
 * @export
 * @interface GetMonitorTransactionsV1Response
 */
export interface GetMonitorTransactionsV1Response {
    /**
     * Flag set to true if operation completed correctly.
     * @type {boolean}
     * @memberof GetMonitorTransactionsV1Response
     */
    'success': boolean;
    /**
     * Message describing operation status or any errors that occurred.
     * @type {string}
     * @memberof GetMonitorTransactionsV1Response
     */
    'msg': string;
    /**
     * The fully qualified name of the Corda state to monitor
     * @type {string}
     * @memberof GetMonitorTransactionsV1Response
     */
    'stateFullClassName'?: string;
    /**
     *
     * @type {Array<GetMonitorTransactionsV1ResponseTxInner>}
     * @memberof GetMonitorTransactionsV1Response
     */
    'tx'?: Array<GetMonitorTransactionsV1ResponseTxInner>;
}
/**
 *
 * @export
 * @interface GetMonitorTransactionsV1ResponseTxInner
 */
export interface GetMonitorTransactionsV1ResponseTxInner {
    /**
     *
     * @type {string}
     * @memberof GetMonitorTransactionsV1ResponseTxInner
     */
    'index'?: string;
    /**
     *
     * @type {string}
     * @memberof GetMonitorTransactionsV1ResponseTxInner
     */
    'data'?: string;
}
/**
 *
 * @export
 * @interface InvokeContractV1Request
 */
export interface InvokeContractV1Request {
    /**
     * The fully qualified name of the Corda flow to invoke
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'flowFullClassName': string;
    /**
     *
     * @type {FlowInvocationType}
     * @memberof InvokeContractV1Request
     */
    'flowInvocationType': FlowInvocationType;
    /**
     * The list of arguments to pass in to the contract method being invoked.
     * @type {Array<JvmObject>}
     * @memberof InvokeContractV1Request
     */
    'params': Array<JvmObject>;
    /**
     * The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing.
     * @type {number}
     * @memberof InvokeContractV1Request
     */
    'timeoutMs'?: number;
}
/**
 *
 * @export
 * @interface InvokeContractV1Response
 */
export interface InvokeContractV1Response {
    /**
     *
     * @type {boolean}
     * @memberof InvokeContractV1Response
     */
    'success': boolean;
    /**
     * Data returned from the JVM when no transaction is running
     * @type {object}
     * @memberof InvokeContractV1Response
     */
    'callOutput': object;
    /**
     * The net.corda.core.flows.StateMachineRunId value returned by the flow execution.
     * @type {string}
     * @memberof InvokeContractV1Response
     */
    'transactionId'?: string;
    /**
     * An array of strings representing the aggregated stream of progress updates provided by a *tracked* flow invocation. If the flow invocation was not tracked, this array is still returned, but as empty.
     * @type {Array<string>}
     * @memberof InvokeContractV1Response
     */
    'progress'?: Array<string>;
    /**
     * The id for the flow handle
     * @type {string}
     * @memberof InvokeContractV1Response
     */
    'flowId': string;
}
/**
 *
 * @export
 * @interface JarFile
 */
export interface JarFile {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof JarFile
     */
    'filename': string;
    /**
     * Indicates whether the cordapp jar in question contains any embedded migrations that Cactus can/should execute between copying the jar into the cordapp directory and starting the node back up.
     * @type {boolean}
     * @memberof JarFile
     */
    'hasDbMigrations': boolean;
    /**
     *
     * @type {string}
     * @memberof JarFile
     */
    'contentBase64': string;
}
/**
 * Can represent JVM primitive and reference types as well. The jvmTypeKind field indicates which one is being stored. If the jvmTypeKind field is set to REFERENCE then the jvmCtorArgs array is expected to be filled, otherwise (e.g. PRIMITIVE jvmTypeKind) it is expected that the primitiveValue property is filled with a primitive data type supported by the JSON standard such as strings, booleans, numbers, etc.
 * @export
 * @interface JvmObject
 */
export interface JvmObject {
    /**
     *
     * @type {JvmTypeKind}
     * @memberof JvmObject
     */
    'jvmTypeKind': JvmTypeKind;
    /**
     *
     * @type {object}
     * @memberof JvmObject
     */
    'primitiveValue'?: object;
    /**
     *
     * @type {Array<JvmObject>}
     * @memberof JvmObject
     */
    'jvmCtorArgs'?: Array<JvmObject>;
    /**
     *
     * @type {JvmType}
     * @memberof JvmObject
     */
    'jvmType': JvmType;
}
/**
 * Represents a reference to a JVM type (such as a Java class)
 * @export
 * @interface JvmType
 */
export interface JvmType {
    /**
     *
     * @type {string}
     * @memberof JvmType
     */
    'fqClassName': string;
    /**
     * This parameter is used to specify that the function used to construct this JvmType is not a constructor function but instead is a factory function. Setting this parameter will cause the plugin to look up methods of the class denoted by fqClassName instead of its constructors.
     * @type {string}
     * @memberof JvmType
     */
    'constructorName'?: string;
    /**
     *
     * @type {JvmObject}
     * @memberof JvmType
     */
    'invocationTarget'?: JvmObject;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const JvmTypeKind: {
    readonly Primitive: "PRIMITIVE";
    readonly Reference: "REFERENCE";
};
export type JvmTypeKind = typeof JvmTypeKind[keyof typeof JvmTypeKind];
/**
 *
 * @export
 * @interface ListFlowsV1Request
 */
export interface ListFlowsV1Request {
    /**
     *
     * @type {string}
     * @memberof ListFlowsV1Request
     */
    'filter'?: string;
}
/**
 *
 * @export
 * @interface ListFlowsV1Response
 */
export interface ListFlowsV1Response {
    /**
     * An array of strings storing the names of the flows as returned by the flowList Corda RPC.
     * @type {Array<string>}
     * @memberof ListFlowsV1Response
     */
    'flowNames': Array<string>;
}
/**
 *
 * @export
 * @interface NetworkHostAndPort
 */
export interface NetworkHostAndPort {
    /**
     *
     * @type {string}
     * @memberof NetworkHostAndPort
     */
    'host': string;
    /**
     *
     * @type {number}
     * @memberof NetworkHostAndPort
     */
    'port': number;
}
/**
 * A NodeDiagnosticInfo holds information about the current node version.
 * @export
 * @interface NodeDiagnosticInfo
 */
export interface NodeDiagnosticInfo {
    /**
     * A list of CorDapps currently installed on this node
     * @type {Array<CordappInfo>}
     * @memberof NodeDiagnosticInfo
     */
    'cordapps': Array<CordappInfo>;
    /**
     * The platform version of this node. This number represents a released API version, and should be used to make functionality decisions (e.g. enabling an app feature only if an underlying platform feature exists)
     * @type {number}
     * @memberof NodeDiagnosticInfo
     */
    'platformVersion': number;
    /**
     * The git commit hash this node was built from
     * @type {string}
     * @memberof NodeDiagnosticInfo
     */
    'revision': string;
    /**
     * The vendor of this node
     * @type {string}
     * @memberof NodeDiagnosticInfo
     */
    'vendor': string;
    /**
     * The current node version string, e.g. 4.3, 4.4-SNAPSHOT. Note that this string is effectively freeform, and so should only be used for providing diagnostic information. It should not be used to make functionality decisions (the platformVersion is a better fit for this).
     * @type {string}
     * @memberof NodeDiagnosticInfo
     */
    'version': string;
}
/**
 *
 * @export
 * @interface NodeInfo
 */
export interface NodeInfo {
    /**
     *
     * @type {Array<NetworkHostAndPort>}
     * @memberof NodeInfo
     */
    'addresses': Array<NetworkHostAndPort>;
    /**
     *
     * @type {number}
     * @memberof NodeInfo
     */
    'platformVersion': number;
    /**
     *
     * @type {number}
     * @memberof NodeInfo
     */
    'serial': number;
    /**
     *
     * @type {Array<Party>}
     * @memberof NodeInfo
     */
    'legalIdentities': Array<Party>;
    /**
     *
     * @type {Array<object>}
     * @memberof NodeInfo
     */
    'legalIdentitiesAndCerts': Array<object>;
}
/**
 *
 * @export
 * @interface Party
 */
export interface Party {
    /**
     *
     * @type {CordaX500Name}
     * @memberof Party
     */
    'name': CordaX500Name;
    /**
     *
     * @type {PublicKey}
     * @memberof Party
     */
    'owningKey': PublicKey;
}
/**
 * An instance of a java.security.PublicKey (which is an interface) implementation such as org.hyperledger.cactus.plugin.ledger.connector.corda.server.impl.PublicKeyImpl
 * @export
 * @interface PublicKey
 */
export interface PublicKey {
    /**
     *
     * @type {string}
     * @memberof PublicKey
     */
    'algorithm': string;
    /**
     *
     * @type {string}
     * @memberof PublicKey
     */
    'format': string;
    /**
     *
     * @type {string}
     * @memberof PublicKey
     */
    'encoded': string;
}
/**
 * SHA-256 is part of the SHA-2 hash function family. Generated hash is fixed size, 256-bits (32-bytes).
 * @export
 * @interface SHA256
 */
export interface SHA256 {
    /**
     *
     * @type {string}
     * @memberof SHA256
     */
    'bytes': string;
    /**
     *
     * @type {number}
     * @memberof SHA256
     */
    'offset': number;
    /**
     *
     * @type {number}
     * @memberof SHA256
     */
    'size': number;
}
/**
 *
 * @export
 * @interface StartFlowV1Response
 */
export interface StartFlowV1Response {
    /**
     *
     * @type {string}
     * @memberof StartFlowV1Response
     */
    'clientRequestId'?: string | null;
    /**
     *
     * @type {FlowV5Error}
     * @memberof StartFlowV1Response
     */
    'flowError'?: FlowV5Error;
    /**
     *
     * @type {string}
     * @memberof StartFlowV1Response
     */
    'flowId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StartFlowV1Response
     */
    'flowResult'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StartFlowV1Response
     */
    'flowStatus': string;
    /**
     *
     * @type {string}
     * @memberof StartFlowV1Response
     */
    'holdingIDShortHash': string;
    /**
     *
     * @type {string}
     * @memberof StartFlowV1Response
     */
    'timestamp': string;
}
/**
 * This method starts a new instance for the specified flow for the specified holding identity.
 * @export
 * @interface StartFlowV5Request
 */
export interface StartFlowV5Request {
    /**
     *
     * @type {string}
     * @memberof StartFlowV5Request
     */
    'holdingIDShortHash'?: string;
    /**
     *
     * @type {string}
     * @memberof StartFlowV5Request
     */
    'clientRequestId': string;
    /**
     *
     * @type {string}
     * @memberof StartFlowV5Request
     */
    'flowClassName': string;
    /**
     *
     * @type {StartFlowV5RequestRequestBody}
     * @memberof StartFlowV5Request
     */
    'requestBody': StartFlowV5RequestRequestBody;
}
/**
 *
 * @export
 * @interface StartFlowV5RequestRequestBody
 */
export interface StartFlowV5RequestRequestBody {
    /**
     *
     * @type {string}
     * @memberof StartFlowV5RequestRequestBody
     */
    'chatName'?: string;
    /**
     *
     * @type {string}
     * @memberof StartFlowV5RequestRequestBody
     */
    'otherMember'?: string;
    /**
     *
     * @type {string}
     * @memberof StartFlowV5RequestRequestBody
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof StartFlowV5RequestRequestBody
     */
    'numberOfRecords'?: string;
}
/**
 *
 * @export
 * @interface StartMonitorV1Request
 */
export interface StartMonitorV1Request {
    /**
     * ID of a client application that wants to monitor the state changes
     * @type {string}
     * @memberof StartMonitorV1Request
     */
    'clientAppId': string;
    /**
     * The fully qualified name of the Corda state to monitor
     * @type {string}
     * @memberof StartMonitorV1Request
     */
    'stateFullClassName': string;
}
/**
 *
 * @export
 * @interface StartMonitorV1Response
 */
export interface StartMonitorV1Response {
    /**
     * Flag set to true if monitoring started correctly.
     * @type {boolean}
     * @memberof StartMonitorV1Response
     */
    'success': boolean;
    /**
     * Message describing operation status or any errors that occurred.
     * @type {string}
     * @memberof StartMonitorV1Response
     */
    'msg': string;
}
/**
 *
 * @export
 * @interface StopMonitorV1Request
 */
export interface StopMonitorV1Request {
    /**
     * ID of a client application that wants to monitor the state changes
     * @type {string}
     * @memberof StopMonitorV1Request
     */
    'clientAppId': string;
    /**
     * The fully qualified name of the Corda state to monitor
     * @type {string}
     * @memberof StopMonitorV1Request
     */
    'stateFullClassName': string;
}
/**
 *
 * @export
 * @interface StopMonitorV1Response
 */
export interface StopMonitorV1Response {
    /**
     * Flag set to true if operation completed correctly.
     * @type {boolean}
     * @memberof StopMonitorV1Response
     */
    'success': boolean;
    /**
     * Message describing operation status or any errors that occurred.
     * @type {string}
     * @memberof StopMonitorV1Response
     */
    'msg': string;
}
/**
 *
 * @export
 * @interface X500Principal
 */
export interface X500Principal {
    /**
     *
     * @type {string}
     * @memberof X500Principal
     */
    'name': string;
    /**
     * Base64 encoded public key
     * @type {string}
     * @memberof X500Principal
     */
    'encoded': string;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
     * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearMonitorTransactionsV1: (clearMonitorTransactionsV1Request?: ClearMonitorTransactionsV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractJarsV1: (deployContractJarsV1Request?: DeployContractJarsV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with diagnostic information about the Corda node
     * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diagnoseNodeV1: (diagnoseNodeV1Request?: DiagnoseNodeV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary This method gets the current status of the specified flow instance.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {string} clientRequestID Client request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flowStatusResponse: (holdingIDShortHash: string, clientRequestID: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowV1: (holdingIDShortHash: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get transactions for monitored state classes.
     * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMonitorTransactionsV1: (getMonitorTransactionsV1Request?: GetMonitorTransactionsV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrometheusMetricsV1: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invokes a contract on a Corda ledger (e.g. a flow)
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeContractV1: (invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all CPIs uploaded to the cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCPIV1: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with a list of the flows on the Corda node.
     * @param {ListFlowsV1Request} [listFlowsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFlowsV1: (listFlowsV1Request?: ListFlowsV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkMapV1: (body?: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary This method starts a new instance for the specified flow for the specified holding identity.
     * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startFlowV1: (startFlowV5Request: StartFlowV5Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Start monitoring corda changes (transactions) of given state class
     * @param {StartMonitorV1Request} [startMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startMonitorV1: (startMonitorV1Request?: StartMonitorV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Stop monitoring corda changes (transactions) of given state class
     * @param {StopMonitorV1Request} [stopMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopMonitorV1: (stopMonitorV1Request?: StopMonitorV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
     * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearMonitorTransactionsV1(clearMonitorTransactionsV1Request?: ClearMonitorTransactionsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClearMonitorTransactionsV1Response>>;
    /**
     *
     * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractJarsV1(deployContractJarsV1Request?: DeployContractJarsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployContractJarsSuccessV1Response>>;
    /**
     * Responds with diagnostic information about the Corda node
     * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diagnoseNodeV1(diagnoseNodeV1Request?: DiagnoseNodeV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiagnoseNodeV1Response>>;
    /**
     *
     * @summary This method gets the current status of the specified flow instance.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {string} clientRequestID Client request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flowStatusResponse(holdingIDShortHash: string, clientRequestID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowStatusV5Response>>;
    /**
     *
     * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowV1(holdingIDShortHash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowStatusV5Responses>>;
    /**
     *
     * @summary Get transactions for monitored state classes.
     * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMonitorTransactionsV1(getMonitorTransactionsV1Request?: GetMonitorTransactionsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMonitorTransactionsV1Response>>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrometheusMetricsV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Invokes a contract on a Corda ledger (e.g. a flow)
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeContractV1Response>>;
    /**
     *
     * @summary List all CPIs uploaded to the cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCPIV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CPIV5Response>>;
    /**
     * Responds with a list of the flows on the Corda node.
     * @param {ListFlowsV1Request} [listFlowsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFlowsV1(listFlowsV1Request?: ListFlowsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFlowsV1Response>>;
    /**
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkMapV1(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeInfo>>>;
    /**
     *
     * @summary This method starts a new instance for the specified flow for the specified holding identity.
     * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startFlowV1(startFlowV5Request: StartFlowV5Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartFlowV1Response>>;
    /**
     *
     * @summary Start monitoring corda changes (transactions) of given state class
     * @param {StartMonitorV1Request} [startMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startMonitorV1(startMonitorV1Request?: StartMonitorV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartMonitorV1Response>>;
    /**
     *
     * @summary Stop monitoring corda changes (transactions) of given state class
     * @param {StopMonitorV1Request} [stopMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopMonitorV1(stopMonitorV1Request?: StopMonitorV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StopMonitorV1Response>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
     * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearMonitorTransactionsV1(clearMonitorTransactionsV1Request?: ClearMonitorTransactionsV1Request, options?: any): AxiosPromise<ClearMonitorTransactionsV1Response>;
    /**
     *
     * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractJarsV1(deployContractJarsV1Request?: DeployContractJarsV1Request, options?: any): AxiosPromise<DeployContractJarsSuccessV1Response>;
    /**
     * Responds with diagnostic information about the Corda node
     * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diagnoseNodeV1(diagnoseNodeV1Request?: DiagnoseNodeV1Request, options?: any): AxiosPromise<DiagnoseNodeV1Response>;
    /**
     *
     * @summary This method gets the current status of the specified flow instance.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {string} clientRequestID Client request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flowStatusResponse(holdingIDShortHash: string, clientRequestID: string, options?: any): AxiosPromise<FlowStatusV5Response>;
    /**
     *
     * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowV1(holdingIDShortHash: string, options?: any): AxiosPromise<FlowStatusV5Responses>;
    /**
     *
     * @summary Get transactions for monitored state classes.
     * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMonitorTransactionsV1(getMonitorTransactionsV1Request?: GetMonitorTransactionsV1Request, options?: any): AxiosPromise<GetMonitorTransactionsV1Response>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrometheusMetricsV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Invokes a contract on a Corda ledger (e.g. a flow)
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: any): AxiosPromise<InvokeContractV1Response>;
    /**
     *
     * @summary List all CPIs uploaded to the cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCPIV1(options?: any): AxiosPromise<CPIV5Response>;
    /**
     * Responds with a list of the flows on the Corda node.
     * @param {ListFlowsV1Request} [listFlowsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFlowsV1(listFlowsV1Request?: ListFlowsV1Request, options?: any): AxiosPromise<ListFlowsV1Response>;
    /**
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkMapV1(body?: object, options?: any): AxiosPromise<Array<NodeInfo>>;
    /**
     *
     * @summary This method starts a new instance for the specified flow for the specified holding identity.
     * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startFlowV1(startFlowV5Request: StartFlowV5Request, options?: any): AxiosPromise<StartFlowV1Response>;
    /**
     *
     * @summary Start monitoring corda changes (transactions) of given state class
     * @param {StartMonitorV1Request} [startMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startMonitorV1(startMonitorV1Request?: StartMonitorV1Request, options?: any): AxiosPromise<StartMonitorV1Response>;
    /**
     *
     * @summary Stop monitoring corda changes (transactions) of given state class
     * @param {StopMonitorV1Request} [stopMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopMonitorV1(stopMonitorV1Request?: StopMonitorV1Request, options?: any): AxiosPromise<StopMonitorV1Response>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
     * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    clearMonitorTransactionsV1(clearMonitorTransactionsV1Request?: ClearMonitorTransactionsV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ClearMonitorTransactionsV1Response, any>>;
    /**
     *
     * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deployContractJarsV1(deployContractJarsV1Request?: DeployContractJarsV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeployContractJarsSuccessV1Response, any>>;
    /**
     * Responds with diagnostic information about the Corda node
     * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    diagnoseNodeV1(diagnoseNodeV1Request?: DiagnoseNodeV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DiagnoseNodeV1Response, any>>;
    /**
     *
     * @summary This method gets the current status of the specified flow instance.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {string} clientRequestID Client request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    flowStatusResponse(holdingIDShortHash: string, clientRequestID: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FlowStatusV5Response, any>>;
    /**
     *
     * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getFlowV1(holdingIDShortHash: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FlowStatusV5Responses, any>>;
    /**
     *
     * @summary Get transactions for monitored state classes.
     * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMonitorTransactionsV1(getMonitorTransactionsV1Request?: GetMonitorTransactionsV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMonitorTransactionsV1Response, any>>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPrometheusMetricsV1(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Invokes a contract on a Corda ledger (e.g. a flow)
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvokeContractV1Response, any>>;
    /**
     *
     * @summary List all CPIs uploaded to the cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listCPIV1(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CPIV5Response, any>>;
    /**
     * Responds with a list of the flows on the Corda node.
     * @param {ListFlowsV1Request} [listFlowsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listFlowsV1(listFlowsV1Request?: ListFlowsV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFlowsV1Response, any>>;
    /**
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkMapV1(body?: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NodeInfo[], any>>;
    /**
     *
     * @summary This method starts a new instance for the specified flow for the specified holding identity.
     * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    startFlowV1(startFlowV5Request: StartFlowV5Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StartFlowV1Response, any>>;
    /**
     *
     * @summary Start monitoring corda changes (transactions) of given state class
     * @param {StartMonitorV1Request} [startMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    startMonitorV1(startMonitorV1Request?: StartMonitorV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StartMonitorV1Response, any>>;
    /**
     *
     * @summary Stop monitoring corda changes (transactions) of given state class
     * @param {StopMonitorV1Request} [stopMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stopMonitorV1(stopMonitorV1Request?: StopMonitorV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StopMonitorV1Response, any>>;
}
