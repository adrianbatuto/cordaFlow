"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.JvmTypeKind = exports.FlowInvocationType = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * Determines which flow starting method will be used on the back-end when invoking the flow. Based on the value here the plugin back-end might invoke the rpc.startFlowDynamic() method or the rpc.startTrackedFlowDynamic() method. Streamed responses are aggregated and returned in a single response to HTTP callers who are not equipped to handle streams like WebSocket/gRPC/etc. do.
 * @export
 * @enum {string}
 */
exports.FlowInvocationType = {
    TrackedFlowDynamic: 'TRACKED_FLOW_DYNAMIC',
    FlowDynamic: 'FLOW_DYNAMIC'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.JvmTypeKind = {
    Primitive: 'PRIMITIVE',
    Reference: 'REFERENCE'
};
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
         * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearMonitorTransactionsV1: async (clearMonitorTransactionsV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/clear-monitor-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(clearMonitorTransactionsV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
         * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractJarsV1: async (deployContractJarsV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/deploy-contract-jars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deployContractJarsV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds with diagnostic information about the Corda node
         * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagnoseNodeV1: async (diagnoseNodeV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/diagnose-node`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(diagnoseNodeV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary This method gets the current status of the specified flow instance.
         * @param {string} holdingIDShortHash Holding identity short hash
         * @param {string} clientRequestID Client request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flowStatusResponse: async (holdingIDShortHash, clientRequestID, options = {}) => {
            // verify required parameter 'holdingIDShortHash' is not null or undefined
            (0, common_1.assertParamExists)('flowStatusResponse', 'holdingIDShortHash', holdingIDShortHash);
            // verify required parameter 'clientRequestID' is not null or undefined
            (0, common_1.assertParamExists)('flowStatusResponse', 'clientRequestID', clientRequestID);
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/flow/{holdingIDShortHash}/{clientRequestID}`
                .replace(`{${"holdingIDShortHash"}}`, encodeURIComponent(String(holdingIDShortHash)))
                .replace(`{${"clientRequestID"}}`, encodeURIComponent(String(clientRequestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
         * @param {string} holdingIDShortHash Holding identity short hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlowV1: async (holdingIDShortHash, options = {}) => {
            // verify required parameter 'holdingIDShortHash' is not null or undefined
            (0, common_1.assertParamExists)('getFlowV1', 'holdingIDShortHash', holdingIDShortHash);
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/getFlow/{holdingIDShortHash}`
                .replace(`{${"holdingIDShortHash"}}`, encodeURIComponent(String(holdingIDShortHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get transactions for monitored state classes.
         * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorTransactionsV1: async (getMonitorTransactionsV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/get-monitor-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getMonitorTransactionsV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1: async (options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/get-prometheus-exporter-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Invokes a contract on a Corda ledger (e.g. a flow)
         * @param {InvokeContractV1Request} [invokeContractV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1: async (invokeContractV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/invoke-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(invokeContractV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List all CPIs uploaded to the cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCPIV1: async (options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/listCPI`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds with a list of the flows on the Corda node.
         * @param {ListFlowsV1Request} [listFlowsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlowsV1: async (listFlowsV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/list-flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(listFlowsV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkMapV1: async (body, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/network-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary This method starts a new instance for the specified flow for the specified holding identity.
         * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFlowV1: async (startFlowV5Request, options = {}) => {
            // verify required parameter 'startFlowV5Request' is not null or undefined
            (0, common_1.assertParamExists)('startFlowV1', 'startFlowV5Request', startFlowV5Request);
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/startFlow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(startFlowV5Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Start monitoring corda changes (transactions) of given state class
         * @param {StartMonitorV1Request} [startMonitorV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startMonitorV1: async (startMonitorV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/start-monitor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(startMonitorV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Stop monitoring corda changes (transactions) of given state class
         * @param {StopMonitorV1Request} [stopMonitorV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopMonitorV1: async (stopMonitorV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/stop-monitor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(stopMonitorV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
         * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearMonitorTransactionsV1(clearMonitorTransactionsV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearMonitorTransactionsV1(clearMonitorTransactionsV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
         * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContractJarsV1(deployContractJarsV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployContractJarsV1(deployContractJarsV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Responds with diagnostic information about the Corda node
         * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diagnoseNodeV1(diagnoseNodeV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diagnoseNodeV1(diagnoseNodeV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary This method gets the current status of the specified flow instance.
         * @param {string} holdingIDShortHash Holding identity short hash
         * @param {string} clientRequestID Client request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flowStatusResponse(holdingIDShortHash, clientRequestID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flowStatusResponse(holdingIDShortHash, clientRequestID, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
         * @param {string} holdingIDShortHash Holding identity short hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlowV1(holdingIDShortHash, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlowV1(holdingIDShortHash, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get transactions for monitored state classes.
         * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonitorTransactionsV1(getMonitorTransactionsV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMonitorTransactionsV1(getMonitorTransactionsV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrometheusMetricsV1(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrometheusMetricsV1(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Invokes a contract on a Corda ledger (e.g. a flow)
         * @param {InvokeContractV1Request} [invokeContractV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeContractV1(invokeContractV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeContractV1(invokeContractV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary List all CPIs uploaded to the cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCPIV1(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCPIV1(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Responds with a list of the flows on the Corda node.
         * @param {ListFlowsV1Request} [listFlowsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlowsV1(listFlowsV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFlowsV1(listFlowsV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkMapV1(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkMapV1(body, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary This method starts a new instance for the specified flow for the specified holding identity.
         * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startFlowV1(startFlowV5Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startFlowV1(startFlowV5Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Start monitoring corda changes (transactions) of given state class
         * @param {StartMonitorV1Request} [startMonitorV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startMonitorV1(startMonitorV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startMonitorV1(startMonitorV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Stop monitoring corda changes (transactions) of given state class
         * @param {StopMonitorV1Request} [stopMonitorV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopMonitorV1(stopMonitorV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopMonitorV1(stopMonitorV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
         * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearMonitorTransactionsV1(clearMonitorTransactionsV1Request, options) {
            return localVarFp.clearMonitorTransactionsV1(clearMonitorTransactionsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
         * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractJarsV1(deployContractJarsV1Request, options) {
            return localVarFp.deployContractJarsV1(deployContractJarsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds with diagnostic information about the Corda node
         * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagnoseNodeV1(diagnoseNodeV1Request, options) {
            return localVarFp.diagnoseNodeV1(diagnoseNodeV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary This method gets the current status of the specified flow instance.
         * @param {string} holdingIDShortHash Holding identity short hash
         * @param {string} clientRequestID Client request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flowStatusResponse(holdingIDShortHash, clientRequestID, options) {
            return localVarFp.flowStatusResponse(holdingIDShortHash, clientRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
         * @param {string} holdingIDShortHash Holding identity short hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlowV1(holdingIDShortHash, options) {
            return localVarFp.getFlowV1(holdingIDShortHash, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get transactions for monitored state classes.
         * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorTransactionsV1(getMonitorTransactionsV1Request, options) {
            return localVarFp.getMonitorTransactionsV1(getMonitorTransactionsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1(options) {
            return localVarFp.getPrometheusMetricsV1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Invokes a contract on a Corda ledger (e.g. a flow)
         * @param {InvokeContractV1Request} [invokeContractV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1(invokeContractV1Request, options) {
            return localVarFp.invokeContractV1(invokeContractV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all CPIs uploaded to the cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCPIV1(options) {
            return localVarFp.listCPIV1(options).then((request) => request(axios, basePath));
        },
        /**
         * Responds with a list of the flows on the Corda node.
         * @param {ListFlowsV1Request} [listFlowsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlowsV1(listFlowsV1Request, options) {
            return localVarFp.listFlowsV1(listFlowsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkMapV1(body, options) {
            return localVarFp.networkMapV1(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary This method starts a new instance for the specified flow for the specified holding identity.
         * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFlowV1(startFlowV5Request, options) {
            return localVarFp.startFlowV1(startFlowV5Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Start monitoring corda changes (transactions) of given state class
         * @param {StartMonitorV1Request} [startMonitorV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startMonitorV1(startMonitorV1Request, options) {
            return localVarFp.startMonitorV1(startMonitorV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Stop monitoring corda changes (transactions) of given state class
         * @param {StopMonitorV1Request} [stopMonitorV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopMonitorV1(stopMonitorV1Request, options) {
            return localVarFp.stopMonitorV1(stopMonitorV1Request, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @summary Clear transactions from internal store so they\'ll not be available by GetMonitorTransactionsV1 anymore.
     * @param {ClearMonitorTransactionsV1Request} [clearMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    clearMonitorTransactionsV1(clearMonitorTransactionsV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).clearMonitorTransactionsV1(clearMonitorTransactionsV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     * @param {DeployContractJarsV1Request} [deployContractJarsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deployContractJarsV1(deployContractJarsV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).deployContractJarsV1(deployContractJarsV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Responds with diagnostic information about the Corda node
     * @param {DiagnoseNodeV1Request} [diagnoseNodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    diagnoseNodeV1(diagnoseNodeV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).diagnoseNodeV1(diagnoseNodeV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary This method gets the current status of the specified flow instance.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {string} clientRequestID Client request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    flowStatusResponse(holdingIDShortHash, clientRequestID, options) {
        return (0, exports.DefaultApiFp)(this.configuration).flowStatusResponse(holdingIDShortHash, clientRequestID, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary This method returns an array containing the statuses of all flows running for a specified holding identity. An empty array is returned if there are no flows running.
     * @param {string} holdingIDShortHash Holding identity short hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getFlowV1(holdingIDShortHash, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getFlowV1(holdingIDShortHash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get transactions for monitored state classes.
     * @param {GetMonitorTransactionsV1Request} [getMonitorTransactionsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMonitorTransactionsV1(getMonitorTransactionsV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getMonitorTransactionsV1(getMonitorTransactionsV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPrometheusMetricsV1(options) {
        return (0, exports.DefaultApiFp)(this.configuration).getPrometheusMetricsV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Invokes a contract on a Corda ledger (e.g. a flow)
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    invokeContractV1(invokeContractV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).invokeContractV1(invokeContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all CPIs uploaded to the cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listCPIV1(options) {
        return (0, exports.DefaultApiFp)(this.configuration).listCPIV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Responds with a list of the flows on the Corda node.
     * @param {ListFlowsV1Request} [listFlowsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listFlowsV1(listFlowsV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).listFlowsV1(listFlowsV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List<NodeInfo>
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkMapV1(body, options) {
        return (0, exports.DefaultApiFp)(this.configuration).networkMapV1(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary This method starts a new instance for the specified flow for the specified holding identity.
     * @param {StartFlowV5Request} startFlowV5Request Request body for starting a flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    startFlowV1(startFlowV5Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).startFlowV1(startFlowV5Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Start monitoring corda changes (transactions) of given state class
     * @param {StartMonitorV1Request} [startMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    startMonitorV1(startMonitorV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).startMonitorV1(startMonitorV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Stop monitoring corda changes (transactions) of given state class
     * @param {StopMonitorV1Request} [stopMonitorV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stopMonitorV1(stopMonitorV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).stopMonitorV1(stopMonitorV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=data:application/json;base64,